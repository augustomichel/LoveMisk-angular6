
import {tap} from 'rxjs/operators';
import { Component, OnInit } from '@angular/core';
import { AbstractControl, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { CartItem } from 'app/restaurant-detail/shopping-cart/cart-item.model';
import { RadioOption } from 'app/shared/radio/radio-option.model';
import { Order, OrderItem } from './order.model';
import { OrderService } from './order.service';


@Component({
  selector: 'lm-order',
  templateUrl: './order.component.html'
})
export class OrderComponent implements OnInit {

  emailPattern = /^(([^<>()\[\]\.,;:\s@\"]+(\.[^<>()\[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i
  
  numberPattern = /^[0-9]*$/
  
  orderForm: FormGroup

  delivery: number = 8

  orderId: string

  paymentOptions: RadioOption[]=[
    {label: 'Dinheiro', value: 'MON'},
    {label: 'Cartão de Débito', value: 'DEB'},
    {label: 'Cartão Refeição', value: 'REF'}
  ]

  constructor(private orderService: OrderService, 
              private router: Router,
              private formBuilder: FormBuilder) { }

  ngOnInit() {
    this.orderForm = new FormGroup({
      name: new FormControl('',{
        validators: [Validators.required, Validators.minLength(5)]
      }),
      email: new FormControl('',[Validators.required,Validators.pattern(this.emailPattern)]),
      emailConfirmation: new FormControl('',[Validators.required,Validators.pattern(this.emailPattern)]),
      address: new FormControl('',[Validators.required,Validators.minLength(5)]),
      number: new FormControl('',[Validators.required,Validators.pattern(this.numberPattern)]),
      optionalAddress: new FormControl(''),
      paymentOption: new FormControl('',[Validators.required])
    }, {validators: [this.equalsTo], updateOn:'blur'})
  }

  equalsTo(group: AbstractControl): {[key: string]: boolean}{     
    const email = group.get('email')
    const emailConfirmation = group.get('emailConfirmation')

    if (!email || !emailConfirmation){
      return undefined
    }

    if(email.value !== emailConfirmation.value ){
      return {emailsNotMatch: true}
    }

    return undefined
  }

  itemsValue(): number {
    return this.orderService.itemsValue()
  }

  cartItems(): CartItem[] {
    return this.orderService.cartItems()
  }

  increaseQty(item: CartItem ){
    this.orderService.increaseQty(item)
  }


  decreaseQty(item: CartItem ){
    this.orderService.decreaseQty(item)
  }

  remove(item: CartItem){
    this.orderService.remove(item)
  }

  isOrderCompleted(): boolean{
    return this.orderId !== undefined
  }

  checkOrder(order: Order){
    order.OrderItems = this.cartItems()
    .map((item:CartItem) => new OrderItem(item.quantity,item.menuItem.id))
    this.orderService.checkOrder(order).pipe(
      tap((orderId: string) => {
        this.orderId = orderId
      }))
      .subscribe((orderId: string) =>{
        this.router.navigate(['/order-summary'])
        this.orderService.clear()    
      })
  }
}
